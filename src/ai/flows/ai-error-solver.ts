// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Analyzes code for errors and suggests fixes.
 *
 * - analyzeCodeForErrors - A function that analyzes code for errors and suggests fixes.
 * - AnalyzeCodeForErrorsInput - The input type for the analyzeCodeForErrors function.
 * - AnalyzeCodeForErrorsOutput - The return type for the analyzeCodeForErrors function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const AnalyzeCodeForErrorsInputSchema = z.object({
  code: z.string().describe('The code to analyze for errors.'),
  projectContext: z.string().optional().describe('Context about the project to help with error analysis.'),
  customErrorSolvingTechniques: z.string().optional().describe('Custom error-solving techniques to improve accuracy.'),
});
export type AnalyzeCodeForErrorsInput = z.infer<typeof AnalyzeCodeForErrorsInputSchema>;

const AnalyzeCodeForErrorsOutputSchema = z.object({
  hasErrors: z.boolean().describe('Whether the code has errors.'),
  errors: z.array(z.string()).describe('A list of errors found in the code.'),
  suggestedFixes: z.array(z.string()).describe('A list of suggested fixes for the errors.'),
});
export type AnalyzeCodeForErrorsOutput = z.infer<typeof AnalyzeCodeForErrorsOutputSchema>;

export async function analyzeCodeForErrors(input: AnalyzeCodeForErrorsInput): Promise<AnalyzeCodeForErrorsOutput> {
  return analyzeCodeForErrorsFlow(input);
}

const analyzeCodeForErrorsPrompt = ai.definePrompt({
  name: 'analyzeCodeForErrorsPrompt',
  input: {
    schema: z.object({
      code: z.string().describe('The code to analyze for errors.'),
      projectContext: z.string().optional().describe('Context about the project to help with error analysis.'),
      customErrorSolvingTechniques: z.string().optional().describe('Custom error-solving techniques to improve accuracy.'),
    }),
  },
  output: {
    schema: z.object({
      hasErrors: z.boolean().describe('Whether the code has errors.'),
      errors: z.array(z.string()).describe('A list of errors found in the code.'),
      suggestedFixes: z.array(z.string()).describe('A list of suggested fixes for the errors.'),
    }),
  },
  prompt: `You are an AI code analyzer. Analyze the following code for errors and suggest fixes.

Code:
{{code}}

{% if projectContext %}
Project Context:
{{projectContext}}
{% endif %}

{% if customErrorSolvingTechniques %}
Custom Error-Solving Techniques:
{{customErrorSolvingTechniques}}
{% endif %}

Indicate if there are errors, list the errors, and provide suggested fixes.
`,
});

const analyzeCodeForErrorsFlow = ai.defineFlow<
  typeof AnalyzeCodeForErrorsInputSchema,
  typeof AnalyzeCodeForErrorsOutputSchema
>(
  {
    name: 'analyzeCodeForErrorsFlow',
    inputSchema: AnalyzeCodeForErrorsInputSchema,
    outputSchema: AnalyzeCodeForErrorsOutputSchema,
  },
  async input => {
    const {output} = await analyzeCodeForErrorsPrompt(input);
    return output!;
  }
);
